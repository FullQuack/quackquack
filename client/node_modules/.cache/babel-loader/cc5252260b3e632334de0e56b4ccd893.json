{"ast":null,"code":"import _classCallCheck from \"/Users/jonathanschwartz/Desktop/FullQuack-app-separate/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jonathanschwartz/Desktop/FullQuack-app-separate/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jonathanschwartz/Desktop/FullQuack-app-separate/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jonathanschwartz/Desktop/FullQuack-app-separate/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jonathanschwartz/Desktop/FullQuack-app-separate/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jonathanschwartz/Desktop/FullQuack-app-separate/client/src/components/layout/SuccessLogin.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { Tags } from '@yaireo/tagify/dist/react.tagify'; // setup some basic Tagify settings object\n\nvar tagifySettings = {\n  blacklist: [\"fuck\", \"shit\"]\n};\n\nvar SuccessLogin =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SuccessLogin, _Component);\n\n  function SuccessLogin() {\n    var _this;\n\n    _classCallCheck(this, SuccessLogin);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SuccessLogin).call(this));\n    _this.state = {\n      name: localStorage.getItem('name'),\n      posts: []\n    };\n    tagifySettings.callbacks = {\n      add: _this.onTagifyAdd,\n      remove: _this.onTagifyRemove,\n      input: _this.onTagifyInput,\n      invalid: _this.onTagifyInvalid\n    };\n    return _this;\n  }\n\n  _createClass(SuccessLogin, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      axios.get('/api/posts/').then(function (res) {\n        _this2.setState({\n          posts: res.data\n        });\n\n        console.log(res.data);\n      }).catch(function (err) {\n        return _this2.setState({\n          errors: err.response.data\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var allPosts = [];\n\n      for (var i = 0; i < this.state.posts.length; i++) {\n        var date = new Date(Date.parse(this.state.posts[i].date));\n        var dateObject = new Date(Date.parse(date));\n        var dateReadable = dateObject.toDateString();\n        allPosts.push(React.createElement(\"div\", {\n          className: \"question_container\",\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, this.state.posts[i].text, \" --\", this.state.posts[i].name, \" \", dateReadable));\n\n        if (this.state.posts[i].tags !== \"\") {\n          var tags = this.state.posts[i].tags;\n        }\n      }\n\n      return React.createElement(\"div\", {\n        className: \"successLogin-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, this.state.name, \" successfully Logged in!\"), React.createElement(Link, {\n        to: \"/postquestion\",\n        className: \"btn btn-lg btn-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"Quack a new Question!\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, allPosts));\n    }\n  }]);\n\n  return SuccessLogin;\n}(Component);\n\nexport default SuccessLogin;","map":{"version":3,"sources":["/Users/jonathanschwartz/Desktop/FullQuack-app-separate/client/src/components/layout/SuccessLogin.js"],"names":["React","Component","axios","Link","Tags","tagifySettings","blacklist","SuccessLogin","state","name","localStorage","getItem","posts","callbacks","add","onTagifyAdd","remove","onTagifyRemove","input","onTagifyInput","invalid","onTagifyInvalid","get","then","res","setState","data","console","log","catch","err","errors","response","allPosts","i","length","date","Date","parse","dateObject","dateReadable","toDateString","push","text","tags"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\n\nimport { Tags } from '@yaireo/tagify/dist/react.tagify'\n\n// setup some basic Tagify settings object\nvar tagifySettings = {\n    blacklist : [\"fuck\", \"shit\"]\n}\n\n\nclass SuccessLogin extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: localStorage.getItem('name'),\n      posts: [],\n    };\n    tagifySettings.callbacks = {\n      add     : this.onTagifyAdd,\n      remove  : this.onTagifyRemove,\n      input   : this.onTagifyInput,\n      invalid : this.onTagifyInvalid\n  }\n  }\n\n  componentDidMount() {\n    axios\n      .get('/api/posts/')\n      .then(res => { \n        this.setState({posts: res.data})\n        console.log(res.data);\n       })\n      .catch(err => this.setState({ errors: err.response.data }));\n  }\n\n  render() {\n    let allPosts = [];\n    for (let i = 0; i < this.state.posts.length; i++) {\n      let date = new Date(Date.parse(this.state.posts[i].date));\n      let dateObject = new Date(Date.parse(date));\n      let dateReadable = dateObject.toDateString();\n      allPosts.push(<div className='question_container' key={i}>{this.state.posts[i].text} --{this.state.posts[i].name} {dateReadable}</div>);\n      if(this.state.posts[i].tags !== \"\"){\n        let tags = this.state.posts[i].tags;\n      }\n    }\n    return (\n      <div className=\"successLogin-container\">\n        <h2>{this.state.name} successfully Logged in!</h2>\n        <Link to=\"/postquestion\" className = \"btn btn-lg btn-light\">\n          Quack a new Question!\n        </Link>\n        <div>\n        {allPosts}\n        </div>\n      </div>\n\n    )\n  }\n}\n\nexport default SuccessLogin;"]},"metadata":{},"sourceType":"module"}